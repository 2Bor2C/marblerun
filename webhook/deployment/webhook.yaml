apiVersion: v1
kind: Service
metadata:
  name: marble-injector
  namespace: marblerun # Deploy to marblerun namespace or kube-system ?
  labels:
    app: marble-injector
spec:
  ports:
  - port: 443
    targetPort: 8443
  selector: marble-injector
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: marble-injector-deployment
  namespace: marblerun
  labels:
    app: marble-injector
spec:
  replicas: 1
  selector:
    matchLabels:
      app: marble-injector
  template:
    metadata:
      labels:
        app: marble-injector
    spec:
      containers:
      - env:
        - name: EDG_MARBLE_COORDINATOR_ADDR
          value: coordinator-mesh-api.marblerun:25554 # Should be set through values template from helm chart in future
        - name: WEBHOOK_CRT
          value: /etc/webhook/certs/cert.pem # Maybe make this conditional through value template, could also be passed as arg
        - name: WEBHOOK_KEY
          value: /etc/webhook/certs/key.pem # Same as WEBHOOK_CRT
        name: marble-injector
        image: test/marblewebhook:v1
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: webhook-certs
            mountPath: /etc/webhook/certs
            readOnly: true
        # Maybe add resource Limits?
        #resources:
        #  limits:
        #    cpu: 100m
        #    memory: 100Mi
      volumes:
      - name: webhook-certs
        secret:
          secretName: marble-injector-webhook-certs
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: marble-injector-cfg
  labels:
    app: marble-injector
webhooks:
  - name: marble-injector.marblerun.svc.cluster.local # Should probably be set through template
    clientConfig:
      caBundle: $(CA_BUNDLE) # Parse through template, or set base64 encoded cabundle here
      service:
        name: marble-injector-svc
        namespace: marblerun # Maybe kube-system namespace instead
        #TODO set this conditionally to /mutate or /mutate-no-sgx through helm chart
        path: "/mutate"
    rules:
    - operations: ["CREATE"] # maybe also add update ?
      apiGroups: [""]
      apiVersions: ["v1"]
      resources: ["pods"]
      scope: "Namespaced"
    # Only send mutate requests if pod is going to be deployed in a namespace with marblerun annotation
    namespaceSelector:
      matchLabels:
        # value is set through cli namespace add
        marblerun/monitor: marblerun
        #marblerun/inject-sgx: enabled
#  # This might be a better way, but will require testing and some changes to cli namespace functions
#  # The idea is to define 2 webhooks, one which runs if a special sgx-inject annotation IS set for a namespace
#  # and one which runs by default if NO sgx-inject annotation is set
#  - name: marble-injector-no-sgx.svc.cluster.local
#    clientConfig:
#      caBundle: $(CA_BUNDLE) # Parse through template, or set base64 encoded cabundle here
#      service:
#        name: marble-injector-svc
#        namespace: marblerun # Maybe kube-system namespace instead
#        path: "/mutate-no-sgx"
#    rules:
#    - operation: ["CREATE"]
#      apiGroups: [""]
#      apiVersions: ["v1"]
#      resources: ["pods"]
#      scope: "Namespaced"
#    namespaceSelector:
#      matchLabels:
#        marblerun/monitor: marblerun
#        marblerun/inject-sgx: disabled